{"version":3,"sources":["Components/create-post-small/index.js","Views/posts-view/index.js"],"names":["CreatePostSmall","type","user","useState","isEditing","setIsEditing","text","setText","title","setTitle","isPosting","setIsPosting","postsContext","useContext","PostsContext","clearData","className","placeholder","value","onChange","e","target","onClick","a","async","postData","content","formateMarkdown","comments","likesList","author","id","uid","displayName","createdAt","firebase","firestore","FieldValue","serverTimestamp","timestamp","key","Date","now","collection","add","fetch","console","error","post","PostsView","Fallback","from","showAuthor","enableCreate","enablePreview","posts","UserContext","allUsers","AllUsersContext","history","useHistory","isOpen","setIsOpen","postOpen","setPostOpen","wrapperRef","useRef","isTabletOrMobile","useMediaQuery","query","useOutsideAlerter","useEffect","status","IDB","handleEsc","document","addEventListener","removeEventListener","isLoading","map","i","data","usersMap","cropContent","log","push","handlePostClick","showCommentaries","ref"],"mappings":"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","file":"static/js/3.bf54972c.chunk.js","sourcesContent":["import React, { useState, useContext } from 'react'\r\n\r\nimport { firebase, firestore } from '../../firebase';\r\n\r\nimport { PostsContext } from '../../Providers/postsProvider';\r\n\r\nimport { formateMarkdown } from '../../utilities';\r\n\r\nimport './style.css'\r\nimport Button from '../button';\r\n\r\nconst CreatePostSmall = ({ type, user }) => {\r\n  const [isEditing, setIsEditing] = useState(false);\r\n  const [text, setText] = useState(\"\");\r\n  const [title, setTitle] = useState(\"\");\r\n  const [isPosting, setIsPosting] = useState(false);\r\n  const postsContext = useContext(PostsContext);\r\n\r\n  const handlePost = () => {\r\n    const post = async () => {\r\n      const postData = {\r\n        title,\r\n        content: formateMarkdown(text),\r\n        type: type,\r\n        comments: [],\r\n        likesList: [],\r\n        author: { id: user.uid, displayName: user.displayName },\r\n        createdAt: firebase.firestore.FieldValue.serverTimestamp(),\r\n        timestamp: firebase.firestore.FieldValue.serverTimestamp(),\r\n        key: Date.now()\r\n      };\r\n      try {\r\n        await firestore.collection('test-posts').add(postData);\r\n        clearData();\r\n        postsContext.fetch(type, true);\r\n      } catch (e) {\r\n        console.error(e);\r\n      }\r\n      setIsPosting(false);\r\n    }\r\n    if (isPosting) return;\r\n    setIsPosting(true);\r\n    post();\r\n  }\r\n  const clearData = () => {\r\n    setText(\"\");\r\n    setTitle(\"\");\r\n    setIsEditing(false);\r\n  }\r\n  return <div className={`cac_create_post_small ${isEditing ? \"editing\" : \"not-editing\"}`}>\r\n    {isEditing ? (<>\r\n      <textarea\r\n        placeholder=\"Title\"\r\n        value={title}\r\n        onChange={e => setTitle(e.target.value)}\r\n        className=\"cac_create_post_small_textarea cac_create_post_small_textarea--title\" />\r\n      <textarea placeholder=\"Content (Markdown)\"\r\n        value={text}\r\n        onChange={e => setText(e.target.value)}\r\n        className=\"cac_create_post_small_textarea cac_create_post_small_textarea--content\" />\r\n      <Button className={`cac_create_post_small_button cac_create_post_small_button--post ${\r\n        isPosting || title === \"\" || text === \"\"\r\n          ? \"cac_create_post_small_button--disabled\"\r\n          : \"\"\r\n        }`}\r\n        onClick={handlePost}>\r\n        Post\r\n        </Button>\r\n      <Button\r\n        className=\"cac_create_post_small_button cac_create_post_small_button--cancel\"\r\n        onClick={clearData}\r\n      >\r\n        Cancel\r\n          </Button>\r\n    </>) : (<>\r\n      <textarea\r\n        className=\"cac_create_post_small_textarea\"\r\n        value=\"\"\r\n        placeholder=\"Create Post\"\r\n        onClick={() => setIsEditing(true)}\r\n        onChange={e => {\r\n          setIsEditing(true);\r\n          setTitle(e.target.value);\r\n        }} />\r\n      <Button className={`cac_create_post_small_button cac_create_post_small_button--post ${\r\n        isPosting || title === \"\" || text === \"\"\r\n          ? \"cac_create_post_small_button--disabled\"\r\n          : \"\"\r\n        }`} >Post</Button>\r\n    </>)}\r\n\r\n  </div>\r\n}\r\n\r\nexport default CreatePostSmall","import React, { useContext, useEffect, useState, useRef } from \"react\";\r\n\r\nimport {\r\n  // eslint-disable-next-line no-unused-vars\r\n  BrowserRouter as Router,\r\n  useHistory\r\n} from \"react-router-dom\";\r\n\r\nimport { useMediaQuery } from \"react-responsive\";\r\nimport useOutsideAlerter from \"../../Hooks/useOutsideAlerter\";\r\n\r\n\r\nimport { PostsContext } from \"../../Providers/postsProvider\";\r\nimport { UserContext, AllUsersContext } from \"../../Providers/userProvider\";\r\n\r\nimport Post from \"../../Components/post\";\r\nimport CreatePostSmall from '../../Components/create-post-small';\r\n\r\nimport \"./style.css\";\r\n\r\nconst PostsView = ({ className = \"\", Fallback, from, type, showAuthor = false, enableCreate = false, enablePreview = true }) => {\r\n  const posts = useContext(PostsContext);\r\n  const user = useContext(UserContext);\r\n  const allUsers = useContext(AllUsersContext);\r\n  const history = useHistory();\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const [postOpen, setPostOpen] = useState({});\r\n\r\n  const wrapperRef = useRef(null);\r\n\r\n  const isTabletOrMobile = useMediaQuery({ query: \"(max-width: 800px)\" });\r\n  useOutsideAlerter(wrapperRef, () => setIsOpen(false));\r\n\r\n\r\n  useEffect(() => {\r\n    if (posts.status.IDB)\r\n      posts.fetch(type);\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [type, posts.status.IDB]);\r\n\r\n  const handlePostClick = (postData) => {\r\n    if (enablePreview && !isTabletOrMobile) {\r\n      console.log(\"click\");\r\n      setPostOpen(postData);\r\n      setIsOpen(true);\r\n    }\r\n    else history.push(`/${from}/${postData.id}`);\r\n  };\r\n\r\n  useEffect(() => {\r\n    const handleEsc = e => {\r\n      if (e.key === 'Escape') setIsOpen(false);\r\n    }\r\n    if (isOpen) {\r\n      document.addEventListener('keydown', handleEsc);\r\n      return () => document.removeEventListener('keydown', handleEsc);\r\n    }\r\n    return () => null;\r\n  }, [isOpen])\r\n\r\n  return (\r\n    <div className={`cac_posts ${className}`}>\r\n\r\n      {enableCreate && <CreatePostSmall type={type} user={user} />}\r\n      {!user.isLoading && posts.status[type] ? (\r\n        posts.posts[type].map((postData, i) => {\r\n          return (\r\n            <Post\r\n              user={user}\r\n              key={i}\r\n              showAuthor={showAuthor}\r\n              data={postData}\r\n              allUsers={allUsers.usersMap}\r\n              cropContent={true}\r\n              onClick={() => handlePostClick(postData)}\r\n              showCommentaries={false}\r\n              from={from}\r\n            />\r\n          );\r\n        })\r\n\r\n      ) : (\r\n          <Fallback />\r\n        )}\r\n      {isOpen && (\r\n        <div className=\"cac_posts_background-black\" >\r\n          <div className=\"cac_post-open_container\" ref={wrapperRef}>\r\n            <Post\r\n              user={user}\r\n              key={postOpen.id}\r\n              showAuthor={showAuthor}\r\n              className=\"cac_posts_post-open\"\r\n              data={postOpen}\r\n              allUsers={allUsers.usersMap}\r\n              cropContent={false}\r\n              showCommentaries={true}\r\n              from={from}\r\n            />\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PostsView;\r\n"],"sourceRoot":""}