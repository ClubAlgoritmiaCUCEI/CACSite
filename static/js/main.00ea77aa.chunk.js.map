{"version":3,"sources":["Components/header/index.js","Components/footer/index.js","Components/button/index.js","firebase.js","Providers/userProvider.js","Components/login/index.js","Components/user_side/index.js","Components/side/index.js","Views/home/index.js","Views/profile/index.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","Footer","Button","props","onClick","children","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","auth","provider","GoogleAuthProvider","createUserProfileDocument","user","aditionalData","a","async","userRef","doc","uid","get","exists","displayName","email","photoURL","set","console","error","mesage","getUserDocument","userDocument","data","UserContext","createContext","UserProvider","useState","isLoading","setUser","useEffect","onAuthStateChanged","userAuth","logged","Provider","value","Login","useContext","log","signOut","signInWithRedirect","UserSide","src","alt","Side","Home","Profile","match","params","App","exact","path","render","Boolean","window","location","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.00ea77aa.chunk.js","sourcesContent":["import React from 'react'\n\nimport './style.css'\n\nconst Header = () =>{\n    return (\n        <div className=\"cac_header\">\n\n        </div>\n    )\n}\nexport default Header;","import React from 'react'\n\nimport './style.css'\n\nconst Footer = () =>{\n    return(\n        <div className=\"cac_footer\">\n\n        </div>\n    )\n}\n\nexport default Footer;","import React from 'react'\n\n\nimport './style.css'\n\nconst Button = (props) =>{\n    const {onClick, children, className} = props;\n    return (\n        <div className={`cac_button ${className}`} onClick={onClick}>\n            {children}\n        </div>\n    )\n}\n\nexport default Button;","import firebase from 'firebase/app'\nimport 'firebase/firestore'\nimport 'firebase/auth'\n\n\nconst firebaseConfig = {\n    apiKey: \"AIzaSyCGuTMhZblWZXxX_5HLcgpOrFVB7GD6OPI\",\n    authDomain: \"cacsite-d2389.firebaseapp.com\",\n    databaseURL: \"https://cacsite-d2389.firebaseio.com\",\n    projectId: \"cacsite-d2389\",\n    storageBucket: \"cacsite-d2389.appspot.com\",\n    messagingSenderId: \"955823965171\",\n    appId: \"1:955823965171:web:40f5d9fa10fc6ca4960886\",\n    measurementId: \"G-2EZ3Z62XX5\"\n  };\n\nfirebase.initializeApp(firebaseConfig);\n\nexport const firestore = firebase.firestore();\n\nexport const auth = firebase.auth();\n\nexport const provider = new firebase.auth.GoogleAuthProvider();\nexport const signInWithGoogle = () => auth.signInWithRedirect(provider);\nexport const signOut = () => auth.signOut();\n\n\n// export const publishPost = async (user, post) => {\n//     const data = {\n//         auth: user,\n//         timestamp: firebase.firestore.FieldValue.serverTimestamp(),\n//         content: post.content,\n//         comments: [],\n//         key: Date.now()\n//     }\n//     return await firestore.collection('posts').add(data);\n\n// }\n\nexport const createUserProfileDocument = async (user, aditionalData) => {\n    if (!user) return;\n\n    //Get a reference to the place in the database where a user profile might be\n    const userRef = firestore.doc(`users/${user.uid}`);\n\n    // Go and fetch the documentfrom that location \n    const snapshot = await userRef.get();\n\n    if (!snapshot.exists) {\n        const { displayName, email, photoURL } = user;\n        try {\n            await userRef.set({\n                displayName,\n                photoURL,\n                email,\n                ...aditionalData\n            })\n\n        } catch (err) {\n            console.error('Error creating user', err.mesage);\n        }\n    }\n    return getUserDocument(user.uid)\n}\n\n\nexport const getUserDocument = async (uid) => {\n    if (!uid) return null;\n    try {\n        const userDocument = await firestore.doc(`users/${uid}`).get();\n        return { uid, ...userDocument.data() };\n    } catch (err) {\n        console.error('Error feching user', err.mesage);\n    }\n}","import React, { createContext, useEffect, useState } from 'react';\nimport { auth, createUserProfileDocument } from '../firebase.js';\n\nexport const UserContext = createContext({});\n\n\nconst UserProvider = ({ children }) => {\n    const [user, setUser] = useState({ isLoading: true });\n    useEffect(() => {\n        const unsubscribeFromAuth = auth.onAuthStateChanged(async userAuth => {\n\n            if (userAuth != null) {\n                setUser({ isLoading: true, logged: true });\n                const userDocument = await createUserProfileDocument(userAuth);\n                setUser({ ...userDocument, isLoading: false, logged: true });\n            } else {\n                setUser({ isLoading: false, logged: false });\n            }\n\n        })\n        return unsubscribeFromAuth;\n    }, []);\n    return (\n        <UserContext.Provider value={user}>\n            {children}\n        </UserContext.Provider>\n    )\n}\nexport default UserProvider","import React, { useContext } from 'react';\nimport Button from '../button'\n\nimport { signInWithGoogle, signOut } from '../../firebase'\n\nimport { UserContext } from '../../Providers/userProvider';\n\nimport './style.css'\n\nconst Login = () => {\n    const user = useContext(UserContext);\n    console.log(user);\n    return (\n        <>\n            {!user.isLoading ? (\n                <div className=\"cac_login\">\n                    {user.logged ? (\n                        <div className=\"cac_logged\">\n                            <Button onClick={() => signOut()} >Sign Out</Button>\n                        </div>\n                    ) : (\n                            <div className={\"cac_login_buttons\"}>\n                                <Button onClick={() => signInWithGoogle()} className=\"login_button button button_outline\"><span>Log in</span></Button>\n                            </div>\n                        )}\n                </div>\n            ) : null}\n        </>\n    )\n}\n\nexport default Login;","import React from 'react'\n\nimport './style.css'\n\nconst UserSide = ({ user }) => {\n    console.log(user);\n    return (\n        <div className=\"cac_user-side\">\n            <img src={user.photoURL} alt=\"profile-pic\" className=\"cac_user-side_photo\" />\n            <div className=\"cac_user-side_info\">\n                <p className=\"cac_user-side_name\">{user.displayName}<br /> </p>\n                <p className=\"cac_user-side_mail\">{user.email}</p>\n            </div>\n\n        </div>\n    )\n}\n\nexport default UserSide;","import React, { useContext } from 'react'\n\nimport { UserContext } from '../../Providers/userProvider';\n\nimport './style.css'\nimport UserSide from '../user_side';\n\nconst Side = ({ className }) => {\n    const user = useContext(UserContext);\n    // console.log(user);\n\n    return (\n        <div className={`cac_side ${className}`}>\n            {!user.isLoading && user.logged ? <UserSide user={user} /> : null}\n\n        </div>\n    )\n}\n\nexport default Side;","import React from 'react'\nimport Button from '../../Components/button'\nimport Login from '../../Components/login'\nimport Side from '../../Components/side'\n\nimport './style.css'\n\nconst Home = () => {\n    return (\n        <div className=\"cac_home\">\n            <Side className=\"cac_home_side\" />\n            <Login />\n        </div>\n    )\n}\n\nexport default Home;","import React from 'react'\n\nimport './style.css'\n\nconst Profile = ({match}) =>{\n    console.log(match);\n    const {uid} = match.params;\n    console.log(uid);\n    return (\n        <div className=\"cac_profile\">\n            {uid ? uid : \"pagina personal :)\"}\n        </div>\n    )\n}\nexport default Profile;","import React from 'react';\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\nimport Header from './Components/header'\nimport Footer from './Components/footer'\n\nimport Home from './Views/home'\nimport Profile from './Views/profile'\n\nimport UserProvider from './Providers/userProvider';\n\nimport './App.css';\nfunction App() {\n  return (\n    <UserProvider>\n      <Header />\n      <div className=\"cac\">\n        <Router>\n          <Switch>\n            <Route exact={true} path={'/'} render={({ match }) => <Home match={match} />} />\n            <Route exact={true} path={'/home'} render={({ match }) => <Home match={match} />} />\n            <Route exact={true} path={'/profile'} render={({ match }) => <Profile match={match} />} />\n            <Route exact={true} path={'/profile/:uid'} render={({ match }) => <Profile match={match} />} />\n            <Route render={({ match }) => (<div>Pagina no encontrada :$</div>)} />\n            <Home />\n          </Switch>\n        </Router>\n      </div>\n\n      <Footer />\n    </UserProvider>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}