{"version":3,"sources":["Views/public/index.js","Components/popup/index.js"],"names":["Public","Fallback","posts","useContext","PostsContext","user","UserContext","allUsers","AllUsersContext","useState","content","setContent","title","setTitle","editing","setEditing","isPosting","setIsPosting","visible","type","alert","setAlert","postSelected","setPostSelected","isOpen","setIsOpen","postRef","useRef","redirectOnClick","useMediaQuery","query","history","useHistory","useEffect","fetch","public","clearData","useOutsideAlerter","className","ref","usersMap","data","find","post","id","cropContent","showCommentaries","from","parentHandleDelete","onClick","value","placeholder","onChange","e","target","logged","a","async","postData","comments","likesList","likesCounter","author","uid","displayName","timestamp","firebase","firestore","FieldValue","serverTimestamp","key","Date","now","collection","add","console","error","isLoading","length","Object","keys","map","i","push","Popup","children","TopPopup","timeOut","setTimeout","clearTimeout"],"mappings":"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","file":"static/js/12.7d0133bd.chunk.js","sourcesContent":["import React, { useContext, useEffect, useState, useRef } from \"react\";\r\n\r\nimport { useMediaQuery } from \"react-responsive\";\r\n\r\nimport {\r\n  // eslint-disable-next-line no-unused-vars\r\n  BrowserRouter as Router,\r\n  useHistory\r\n} from \"react-router-dom\";\r\n\r\nimport { firestore, firebase } from \"../../firebase\";\r\n\r\nimport { PostsContext } from \"../../Providers/postsProvider\";\r\nimport { UserContext, AllUsersContext } from \"../../Providers/userProvider\";\r\nimport useOutsideAlerter from \"../../Hooks/useOutsideAlerter\";\r\n\r\nimport Button from \"../../Components/button\";\r\nimport Post from \"../../Components/post\";\r\nimport { TopPopup } from \"../../Components/popup\";\r\n\r\nimport \"./style.css\";\r\n\r\nconst Public = ({ Fallback }) => {\r\n  const posts = useContext(PostsContext);\r\n  const user = useContext(UserContext);\r\n  const allUsers = useContext(AllUsersContext);\r\n\r\n  const [content, setContent] = useState(\"\");\r\n  const [title, setTitle] = useState(\"\");\r\n  const [editing, setEditing] = useState(false);\r\n  const [isPosting, setIsPosting] = useState(false);\r\n  const [alert, setAlert] = useState({ visible: false, content: \"\", type: \"\" });\r\n  const [postSelected, setPostSelected] = useState(null);\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const postRef = useRef(null);\r\n  const redirectOnClick = useMediaQuery({ query: \"(max-width: 980px)\" });\r\n  const history = useHistory();\r\n\r\n  useEffect(() => {\r\n    posts.fetch.public();\r\n  }, [posts.fetch]);\r\n\r\n  const handleUserCreate = e => {\r\n    setEditing(true);\r\n    setTitle(e.target.value);\r\n  };\r\n\r\n  const clearData = () => {\r\n    setTitle(\"\");\r\n    setContent(\"\");\r\n    setEditing(\"\");\r\n  };\r\n\r\n  const handlePost = () => {\r\n    const post = async () => {\r\n      setIsPosting(true);\r\n      const postData = {\r\n        title,\r\n        content,\r\n        type: \"public-post\",\r\n        comments: [],\r\n        likesList: [],\r\n        likesCounter: 0,\r\n        author: { id: user.uid, displayName: user.displayName },\r\n        timestamp: firebase.firestore.FieldValue.serverTimestamp(),\r\n        key: Date.now()\r\n      };\r\n      try {\r\n        await firestore.collection(\"public\").add(postData);\r\n        setAlert({\r\n          visible: true,\r\n          content: \"Post published succesfully\",\r\n          type: \"success\"\r\n        });\r\n        clearData();\r\n      } catch (e) {\r\n        console.error(e);\r\n        setAlert({\r\n          visible: true,\r\n          content: \"Error publishing post\",\r\n          type: \"error\"\r\n        });\r\n      }\r\n      setIsPosting(false);\r\n    };\r\n    if (!user.logged) {\r\n      setAlert({\r\n        visible: true,\r\n        type: \"error\",\r\n        content: \"You need to sign in to post\"\r\n      });\r\n    } else if (!(isPosting || title === \"\" || content === \"\")) {\r\n      post();\r\n    }\r\n  };\r\n\r\n  const handlePostClick = id => {\r\n    if (redirectOnClick) {\r\n      history.push(`/public/${id}`);\r\n    } else {\r\n      setPostSelected(id);\r\n      setIsOpen(true);\r\n    }\r\n  };\r\n  useOutsideAlerter(postRef, () => setIsOpen(false));\r\n\r\n  return (\r\n    <div className=\"cac_public\">\r\n      {isOpen && (\r\n        <div className=\"cac_public_background-black\">\r\n          <div className=\"cac_public_post-container\" ref={postRef}>\r\n            <Post\r\n              allUsers={allUsers.usersMap}\r\n              className=\"cac_public_post\"\r\n              data={posts.posts.public.find(post => post.id === postSelected)}\r\n              cropContent={false}\r\n              showCommentaries={true}\r\n              user={user}\r\n              from=\"public\"\r\n              parentHandleDelete={() => {\r\n                setIsOpen(false);\r\n                setAlert({\r\n                  visible: true,\r\n                  content: \"Post removed\",\r\n                  type: \"success\"\r\n                });\r\n              }}\r\n            />\r\n          </div>\r\n        </div>\r\n      )}\r\n      {alert.visible && (\r\n        <TopPopup\r\n          className={alert.type}\r\n          onClick={() => setAlert({ visible: false })}\r\n        >\r\n          {alert.content}\r\n        </TopPopup>\r\n      )}\r\n      {editing ? (\r\n        <div className=\"cac_public_create cac_public_create--creating\">\r\n          <textarea\r\n            className=\"cac_public_create_text-area cac_public_create_text-area--title\"\r\n            value={title}\r\n            placeholder=\"Title\"\r\n            onChange={e => setTitle(e.target.value)}\r\n          />\r\n          <textarea\r\n            className=\"cac_public_create_text-area cac_public_create_text-area--content\"\r\n            value={content}\r\n            placeholder=\"Content (Markdown)\"\r\n            onChange={e => setContent(e.target.value)}\r\n          />\r\n          <Button\r\n            className={`cac_public_create_button cac_public_create_button--post ${\r\n              isPosting || title === \"\" || content === \"\"\r\n                ? \"cac_public_create_button--disabled\"\r\n                : \"\"\r\n            }`}\r\n            onClick={handlePost}\r\n          >\r\n            Post\r\n          </Button>\r\n          <Button\r\n            className=\"cac_public_create_button cac_public_create_button--cancel\"\r\n            onClick={clearData}\r\n          >\r\n            Cancel\r\n          </Button>\r\n        </div>\r\n      ) : (\r\n        <div className=\"cac_public_create cac_public_create--default\">\r\n          <textarea\r\n            className=\"cac_public_create_text-area cac_public_create_text-area--title\"\r\n            value=\"\"\r\n            onChange={handleUserCreate}\r\n            onClick={() => setEditing(true)}\r\n            placeholder=\"Create Post\"\r\n          />\r\n          <Button className=\"cac_public_create_button  cac_public_create_button--post cac_public_create_button--disabled\">\r\n            Post\r\n          </Button>\r\n        </div>\r\n      )}\r\n      <div className=\"cac_public_posts\">\r\n        {!user.isLoading &&\r\n        posts.posts.public.length > 0 &&\r\n        Object.keys(allUsers.usersMap).length > 0 ? (\r\n          posts.posts.public.map((postData, i) => {\r\n            return (\r\n              <Post\r\n                user={user}\r\n                key={i}\r\n                data={postData}\r\n                allUsers={allUsers.usersMap}\r\n                cropContent={true}\r\n                onClick={() => handlePostClick(postData.id)}\r\n                showCommentaries={false}\r\n                from=\"public\"\r\n                parentHandleDelete={() => {\r\n                  setAlert({\r\n                    visible: true,\r\n                    content: \"Post removed\",\r\n                    type: \"success\"\r\n                  });\r\n                }}\r\n              />\r\n            );\r\n          })\r\n        ) : (\r\n          <Fallback />\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Public;\r\n","import React, { useEffect } from \"react\";\r\n\r\nimport \"./style.css\";\r\n\r\nconst Popup = ({ children }) => {\r\n  return <div className=\"cac_popup\">{children}</div>;\r\n};\r\n\r\nexport default Popup;\r\n\r\nconst TopPopup = ({ children, className = \"error\", onClick = () => null }) => {\r\n  useEffect(() => {\r\n    const timeOut = setTimeout(() => {\r\n      onClick();\r\n    }, 5000);\r\n    return () => clearTimeout(timeOut);\r\n  });\r\n\r\n  return (\r\n    <div\r\n      onClick={onClick}\r\n      className={`cac_popup-top ${className ? className : \"\"}`}\r\n    >\r\n      {children}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport { TopPopup };\r\n"],"sourceRoot":""}